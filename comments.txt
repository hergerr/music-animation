
1] You implemented the application using (put a 'x' in the selected box, e.g. "[x] Vue"):
[x] Vue
[ ] JavaScript

2] You chose to implement the application using this technology rather than the other option because:
> Vue is VirtualDom based framework, thus the peformance is better.
> I estimated, that there could be lot of state management with bars.
> Dividing frontend code to components makes it simpler to keep in order and to understand for others.

3] How much time did you spend on this challenge?
> I spent ~5 hours on one sitting to make working version.
> I spent another ~6 hours reading articles, polishing code and testing other solutions, but it did not 
> change look or way of working of programm. I could probably save most of that time, but 
> I just wanted to be sure, that I have done my best :).

4] What was the most time consuming part of this challenge?
> Understanding the necessary tools (audio processing, drawing and animating svg).
> Reminding myself Vue (I used it last time 6 months ago).

5] Is the 'Start' button strictly needed? If so, why? If not, would you think it would be better to remove it?
> It is not needed. I think it would be better to remove it. However, some user interaction is required
> to start music to play (see autoplay policy). It could be for example started by pressing 'space'
> (of course information about it should be well visible).

6] Do you have any suggestions for improving the visual appeal or the user experience of this application?
> Make visualization full-screen with nice gradient as a background.
> Make custom player tool.
> Start on pressing 'space'.
> Include song name and author somewhere (maybe right-upper corner) instead of title 'Visualizer'.
> Find better font

7] (Only if you added more dependencies) For each added dependency, justify why you added it.
> 

8] Do you have anything else to add to help us understand your approach?
> 1. Remember to open vscode with this directory as a root. 
> Here vetur config is located, which has all the settings for correct 
> displaying of the code.
> 2. I created 'pages' and 'componets' directories, because it is the 
> way I consider reasonable. Every page contains state, which is passed downwards.
> Further development of application can be faster, when there already are pages to
> connect to the router.
> 3. I deliberately chose to make AudioVisualizer component responsible only 
> for data presentation. There could be less code, if it would be responsible
> also for getting data, but I found division between data processing and 
> presenting for more important.